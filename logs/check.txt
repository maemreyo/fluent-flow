# Phân tích luồng lưu Transcript vào Database (Đã xác minh)

Ngày điều tra: 2025-09-08

**Yêu cầu:** Điều tra kỹ lưỡng, từng file một, về cách transcript được lưu vào database.

**Kết luận cuối cùng:** Có một luồng xử lý hoàn chỉnh để tự động lấy transcript khi người dùng export/lưu một "Loop". Tuy nhiên, ở bước cuối cùng, có một sự không nhất quán trong code khiến cho dữ liệu transcript **bị bỏ qua và không được lưu vào database**. Luồng xử lý đang gọi một hàm lưu trữ cũ thay vì hàm đã được cập nhật.

---

## Luồng xử lý chi tiết (Đã xác minh)

Đây là luồng dữ liệu chính xác từ đầu đến cuối:

### 1. Hành động của người dùng & Khởi tạo

- **File:** `lib/content/main-orchestrator.ts`
- **Hành động:** Người dùng nhấn nút "Export Current Loops" trên UI của content script.
- **Logic:** Hàm `exportCurrentLoops()` được gọi.

### 2. Chuẩn bị dữ liệu Loop & Transcript

- **File:** `lib/content/features/multiple-loops.ts`
- **Logic:**
    1.  Hàm `exportCurrentLoops()` trong `main-orchestrator` gọi đến `exportCurrentLoops()` trong `MultipleLoopsFeature`.
    2.  Hàm này lặp qua tất cả các loop đang hoạt động.
    3.  Với mỗi loop, nó khởi tạo `YouTubeTranscriptService` để lấy transcript cho khoảng thời gian của loop đó.

### 3. Lấy dữ liệu Transcript từ API YouTube

- **File:** `lib/services/youtube-transcript-service.ts`
- **Logic:**
    1.  `getTranscriptSegment()` được gọi.
    2.  Nó gọi `fetchFromInnerTubeAPI()`, hàm này lại gọi `getInnerTubeDataFromContentScript()`.
    3.  Hàm helper này gửi message `GET_INNERTUBE_DATA` đến `content.ts`.
    4.  `content.ts` nhận message, thực thi fetch API nội bộ của YouTube, và trả về dữ liệu captions/transcript.
    5.  Dữ liệu transcript được trả về ngược lại chuỗi và được **gắn vào đối tượng `SavedLoop`**.

### 4. Gửi dữ liệu đến Background Script

- **File:** `lib/content/main-orchestrator.ts`
- **Logic:** Sau khi `multiple-loops.ts` trả về một mảng các object `SavedLoop` đã chứa transcript, `main-orchestrator` gửi một message `SAVE_LOOPS` chứa mảng này đến background script.

### 5. Xử lý ở Background Script

- **File:** `background.ts`
- **Logic:** Script này nhận message `SAVE_LOOPS` và chuyển tiếp yêu cầu bằng cách gọi `handleLoopMessage('save_multiple', message.loops, ...)`. Nó hoạt động như một bộ định tuyến.

### 6. Thực thi lưu trữ (Điểm xảy ra sự không nhất quán)

- **File:** `lib/background/loop-handler.ts`
- **Logic:**
    1.  `handleLoopMessage` gọi hàm `saveMultipleLoops()`.
    2.  `saveMultipleLoops` lặp qua mảng và gọi `saveLoop()` cho từng loop.
    3.  Hàm `saveLoop` tại đây chứa logic để lưu thông tin cơ bản của loop vào Supabase (bảng `practice_sessions` và `loop_segments`).
    4.  **VẤN ĐỀ:** Phiên bản `saveLoop` này **không có code để xử lý thuộc tính `transcript`** trong object `SavedLoop`. Nó chỉ lưu các thông tin cơ bản.

### 7. Logic đúng bị bỏ qua

- **File:** `lib/stores/fluent-flow-supabase-store.ts`
- **Logic:** File này chứa một hàm `saveLoop` khác, **đã được cập nhật** với logic chính xác:
    ```typescript
    // 🚀 NEW: Save transcript data to transcripts table if available
    if (loop.transcript && loop.transcript.trim() && loop.segments && loop.segments.length > 0) {
      // ... code để lưu transcript vào bảng 'transcripts'
    }
    ```
- **Kết luận:** Luồng xử lý hiện tại không gọi đến hàm `saveLoop` đã được cập nhật này. Do đó, dù transcript đã được lấy thành công ở các bước trước, nó vẫn bị mất ở bước lưu cuối cùng.
  Tóm lại, luồng lấy transcript của bạn được thiết kế đúng, nhưng ở bước cuối cùng, nó đang gọi một hàm lưu trữ cũ, dẫn đến việc
  dữ liệu transcript bị bỏ qua. Đây có thể là một lỗi cần sửa.